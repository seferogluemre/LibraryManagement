generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismabox {
  provider                    = "prismabox"
  // you can optionally specify the output location. Defaults to ./prismabox
  output                      = "./prismabox"
  // if you want, you can customize the imported variable name that is used for the schemes. Defaults to "Type" which is what the standard typebox package offers
  typeboxImportVariableName   = "t"
  // you also can specify the dependency from which the above import should happen. This is useful if a package re-exports the typebox package and you would like to use that
  typeboxImportDependencyName = "elysia"
  // by default the generated schemes do not allow additional properties. You can allow them by setting this to true
  additionalProperties        = true
  // optionally enable the data model generation. See the data model section below for more info
  inputModel                  = true
}

enum UserRole {
  TEACHER
  ADMIN
}

enum NotificationType {
  OVERDUE_BOOK
  SYSTEM
}

model User {
  id             String   @id @default(uuid()) @map("user_id")
  name           String   @map("user_name")
  email          String   @unique @map("user_email")
  hashedPassword String   @map("hashed_password")
  role           UserRole
  createdAt      DateTime @default(now()) @map("created_at")

  createdBooks             Book[]            @relation("BookCreatedBy")
  assignments              BookAssignment[]  @relation("AssignedBy")
  session                  Session?
  notifications            Notification[]
  createdClassrooms        Classroom[]       @relation("ClassroomCreatedBy")
  createdTransferHistories TransferHistory[] @relation("TransferHistoryCreatedBy")

  @@index([role])
  @@index([name])
  @@map("users")
}

model Author {
  id    String @id @default(uuid()) @map("author_id")
  name  String @map("author_name")
  books Book[]

  @@index([name])
  @@map("authors")
}

model Category {
  id    String @id @default(uuid()) @map("category_id")
  name  String @unique @map("category_name")
  books Book[]

  @@map("categories")
}

model Publisher {
  id    String @id @default(uuid()) @map("publisher_id")
  name  String @map("publisher_name")
  books Book[]

  @@index([name])
  @@map("publishers")
}

model Student {
  id        String    @id @default(uuid()) @map("student_id")
  name      String    @map("student_name")
  email     String?   @map("student_email")
  studentNo Int       @unique @map("student_number")
  class     Classroom @relation(fields: [classId], references: [id])
  classId   String    @map("class_id")

  assignments       BookAssignment[]
  transferHistories TransferHistory[]

  @@index([classId])
  @@index([name])
  @@map("students")
}

model Book {
  id              String  @id @default(uuid()) @map("book_id")
  title           String  @map("book_title")
  isbn            String? @unique @map("book_isbn")
  publishedYear   Int?    @map("published_year")
  totalCopies     Int     @default(1) @map("total_copies")
  availableCopies Int     @default(1) @map("available_copies")

  author   Author @relation(fields: [authorId], references: [id])
  authorId String @map("author_id")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  publisher   Publisher? @relation(fields: [publisherId], references: [id])
  publisherId String?    @map("publisher_id")

  addedBy   User?   @relation("BookCreatedBy", fields: [addedById], references: [id])
  addedById String? @map("added_by_id")

  assignments BookAssignment[]

  @@index([authorId])
  @@index([categoryId])
  @@index([publisherId])
  @@index([title])
  @@index([availableCopies])
  @@index([publishedYear])
  @@map("books")
}

model Classroom {
  id   String @id @default(uuid()) @map("classroom_id")
  name String @map("classroom_name")

  createdAt   DateTime          @default(now())
  students    Student[]
  oldTransfer TransferHistory[] @relation("OldTransfer")
  newTransfer TransferHistory[] @relation("NewTransfer")

  createdBy   User   @relation("ClassroomCreatedBy", fields: [createdById], references: [id])
  createdById String @map("created_by_id")

  @@index([name])
  @@map("classrooms")
}

model BookAssignment {
  id        String  @id @default(uuid()) @map("assignment_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId String  @map("student_id")

  book   Book   @relation(fields: [bookId], references: [id])
  bookId String @map("book_id")

  assignedBy   User   @relation("AssignedBy", fields: [assignedById], references: [id])
  assignedById String @map("assigned_by_id")

  assignedAt DateTime  @default(now()) @map("assigned_at")
  returnDue  DateTime  @map("return_due")
  returned   Boolean   @default(false) @map("is_returned")
  returnedAt DateTime? @map("returned_at")

  @@index([studentId])
  @@index([bookId])
  @@index([assignedById])
  @@index([returned])
  @@index([returnDue])
  @@index([assignedAt])
  @@index([studentId, returned])
  @@index([returned, returnDue])
  @@map("book_assignments")
}

model Session {
  id           String   @id @default(uuid()) @map("session_id")
  userId       String   @unique @map("user_id")
  accessToken  String   @map("access_token") @db.Text
  refreshToken String   @map("refresh_token") @db.Text
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@map("sessions")
}

model TransferHistory {
  id        String  @id @default(uuid()) @map("transfer_history_id")
  studentId String  @map("student_id")
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  oldClassId String    @map("old_class_id")
  oldClass   Classroom @relation("OldTransfer", fields: [oldClassId], references: [id])

  newClassId String    @map("new_class_id")
  newClass   Classroom @relation("NewTransfer", fields: [newClassId], references: [id])

  notes        String?  @map("notes")
  transferDate DateTime @default(now()) @map("transfer_date")
  createdAt    DateTime @default(now()) @map("created_at")

  createdBy   User   @relation("TransferHistoryCreatedBy", fields: [createdById], references: [id])
  createdById String @map("created_by_id")

  @@index([studentId])
  @@index([transferDate])
  @@index([oldClassId])
  @@index([newClassId])
  @@index([createdById])
  @@map("transfer_histories")
}

model Notification {
  id String @id @default(uuid())

  type NotificationType @map("notification_type")

  userId    String
  message   String
  isRead    Boolean  @default(false)
  metadata  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@map("notifications")
}
